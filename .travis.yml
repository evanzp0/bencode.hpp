language: cpp
dist: xenial

env:
  global:
    - PIP=pip

addons:
  apt:
    sources: &sources
      - boost-latest
      - ubuntu-toolchain-r-test
    packages: &packages
      - libboost1.58-dev
      - libboost-iostreams1.58-dev
      - libboost-program-options1.58-dev
      - ninja-build
      - python-virtualenv

cache:
  apt: true

matrix:
  include:

    # Clang builds

    - compiler: clang
      env: COMPILER=clang++-3.8
      addons:
        apt:
          sources:
            - *sources
            - llvm-toolchain-precise-3.8
          packages:
            - *packages
            - clang-3.8
            - libstdc++-5-dev

    - compiler: clang
      env: COMPILER=clang++-3.9
      addons:
        apt:
          sources:
            - *sources
            - llvm-toolchain-precise-3.9
          packages:
            - *packages
            - clang-3.9
            - libstdc++-5-dev

    - compiler: clang
      env: COMPILER=clang++-4.0
      addons:
        apt:
          sources:
            - *sources
            - llvm-toolchain-trusty-4.0
          packages:
            - *packages
            - clang-4.0
            - libstdc++-5-dev

    # Skipping clang 5.0 since it doesn't install properly under Xenial.

    - compiler: clang
      env: COMPILER=clang++-6.0
      addons:
        apt:
          sources:
            - *sources
            - llvm-toolchain-xenial-6.0
          packages:
            - *packages
            - clang-6.0
            - libstdc++-5-dev

    - compiler: clang
      env: COMPILER=clang++-7
      addons:
        apt:
          sources:
            - *sources
            - llvm-toolchain-xenial-7
          packages:
            - *packages
            - clang-7
            - libstdc++-5-dev

    - compiler: clang
      env: COMPILER=clang++-8
      addons:
        apt:
          sources:
            - *sources
            - llvm-toolchain-xenial-8
          packages:
            - *packages
            - clang-8
            - libstdc++-5-dev

    # GCC builds

    - compiler: gcc
      env: COMPILER=g++-5
      addons:
        apt:
          sources: *sources
          packages:
            - *packages
            - g++-5

    - compiler: gcc
      env: COMPILER=g++-6
      addons:
        apt:
          sources: *sources
          packages:
            - *packages
            - g++-6

    - compiler: gcc
      env: COMPILER=g++-7
      addons:
        apt:
          sources: *sources
          packages:
            - *packages
            - g++-7

    - compiler: gcc
      env: COMPILER=g++-8
      addons: &gcc-8
        apt:
          sources: *sources
          packages:
            - *packages
            - g++-8

    - os: osx
      env: PIP=pip2 COMPILER=clang++ BACKEND=ninja

    # C++17 builds

    - compiler: clang
      env: EXTRAOPTS="--std=c++17" COMPILER=clang++-8
      addons:
        apt:
          sources:
            - *sources
            - llvm-toolchain-xenial-8
          packages:
            - *packages
            - clang-8
            - libstdc++-7-dev

    - compiler: gcc
      env: EXTRAOPTS="--std=c++17" COMPILER=g++-8
      addons: *gcc-8

before_install:
  - |
    if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      shell_session_update() { :; }
      brew update
      brew install ninja
    else
      set -e
      virtualenv env && source env/bin/activate
    fi
  - ${PIP} install bfg9000
install:
  # Build and install the lastest master revision of mettle.
  - git clone https://github.com/jimporter/mettle.git
  - pushd mettle
  - >
    CXX=${COMPILER} CPATH="`pwd`/../include" 9k build --backend=ninja
    --prefix=$HOME
  - cd build
  - ninja install
  - popd
script:
  - >
    CXX=${COMPILER} CPATH="$HOME/include" CXXFLAGS="-Wall -Wextra -pedantic"
    LIBRARY_PATH="$HOME/lib" 9k build --backend=ninja
  - cd build
  - ninja test
