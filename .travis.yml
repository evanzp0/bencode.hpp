language: cpp
sudo: false

env:
  global:
    - PYTHON=python
    - PIP=pip

matrix:
  include:
    - compiler: clang
      env: COMPILER=clang++-3.6
      addons:
        apt:
          sources: &sources
            - boost-latest
            - llvm-toolchain-precise-3.6
            - llvm-toolchain-precise-3.7
            - llvm-toolchain-precise-3.8
            - ubuntu-toolchain-r-test
          packages:
            - clang-3.6
            - libstdc++-5-dev
            - libboost1.55-dev
            - libboost-iostreams1.55-dev
            - libboost-program-options1.55-dev
            - ninja-build
            - python-virtualenv
    - compiler: clang
      env: COMPILER=clang++-3.7
      addons:
        apt:
          sources: *sources
          packages:
            - clang-3.7
            - libstdc++-5-dev
            - libboost1.55-dev
            - libboost-iostreams1.55-dev
            - libboost-program-options1.55-dev
            - ninja-build
            - python-virtualenv
    - compiler: clang
      env: COMPILER=clang++-3.8
      addons:
        apt:
          sources: *sources
          packages:
            - clang-3.8
            - libstdc++-5-dev
            - libboost1.55-dev
            - libboost-iostreams1.55-dev
            - libboost-program-options1.55-dev
            - ninja-build
            - python-virtualenv
    - compiler: gcc
      # GCC doesn't like building in parallel on ninja. No idea why.
      env: COMPILER=g++-5 BUILD_ARGS="-j1"
      addons:
        apt:
          sources: *sources
          packages:
            - g++-5
            - libboost1.55-dev
            - libboost-iostreams1.55-dev
            - libboost-program-options1.55-dev
            - ninja-build
            - python-virtualenv
    - compiler: gcc
      env: COMPILER=g++-6 BUILD_ARGS="-j1"
      addons:
        apt:
          sources: *sources
          packages:
            - g++-6
            - libboost1.55-dev
            - libboost-iostreams1.55-dev
            - libboost-program-options1.55-dev
            - ninja-build
            - python-virtualenv
    - os: osx
      env: PYTHON=python2 PIP=pip2 COMPILER=clang++ BACKEND=ninja

cache:
  apt: true

before_install:
  - set -e
  - |
    if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      shell_session_update() { :; }
      brew update
      brew install ${PYTHON} ninja
    else
      virtualenv env && source env/bin/activate
    fi
  - ${PIP} install bfg9000
install:
  - |
    git clone https://github.com/jimporter/mettle.git
    pushd mettle
    CXX=${COMPILER} CXXFLAGS="-I`pwd`/../include" 9k build --backend=ninja --prefix=$HOME
    cd build
    ninja install
    popd
script:
  - |
    CXX=${COMPILER} CXXFLAGS="-Wall -Wextra -pedantic -I$HOME/include" LIBRARY_PATH="$HOME/lib" 9k build --backend=ninja
    cd build
    ninja test
